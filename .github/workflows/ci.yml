name: CI

on: [ push, pull_request ]

jobs:
  Build-by-Pyinstaller:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: amd64-win64-cli-pyinstaller-packaged, os: windows-latest, A: x64, build_type_a: cli, build_type_b: s, bit: 64 }
          - { name: amd64-win64-cli-pyinstaller-unpackaged, os: windows-latest, A: x64, build_type_a: cli, build_type_b: m, bit: 64 }
          - { name: amd64-win64-gui-pyinstaller-packaged,  os: windows-latest, A: x64, build_type_a: gui, build_type_b: s, bit: 64 }
          - { name: amd64-win64-gui-pyinstaller-unpackaged, os: windows-latest, A: x64, build_type_a: gui, build_type_b: m, bit: 64 }
          - { name: i386-win32-cli-pyinstaller-packaged, os: windows-latest, A: x86, build_type_a: cli, build_type_b: s, bit: 32 }
          - { name: i386-win32-cli-pyinstaller-unpackaged, os: windows-latest, A: x86, build_type_a: cli, build_type_b: m, bit: 32 }
          - { name: i386-win32-gui-pyinstaller-packaged,  os: windows-latest, A: x86, build_type_a: gui, build_type_b: s, bit: 32 }
          - { name: i386-win32-gui-pyinstaller-unpackaged, os: windows-latest, A: x86, build_type_a: gui, build_type_b: m, bit: 32 }
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Download UPX
      uses: i3h/download-release-asset@v1.3.2
      with:
        owner: upx
        repo: upx
        tag: latest
        file: /upx-[0-9.]+-win${{ matrix.bit }}.zip/
        path: ./
    - name: Unzip UPX
      run: |
        Expand-Archive -Path ./upx-*.zip -DestinationPath ./
        Move-Item ./upx-*/upx.exe ./
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install dependencies
      shell: cmd
      run: |
        pip install pyinstaller pillow colorlog pycryptodome numpy
        if ${{ matrix.build_type_a }} == cli pip install progressbar2
        if ${{ matrix.build_type_a }} == gui pip install -U "https://wxpython.org/Phoenix/snapshot-builds/wxPython-4.1.2a1.dev5304+7c8318e8-cp310-cp310-win_amd64.whl"
    - name: Build artifacts
      shell: cmd
      run: |
        if ${{ matrix.build_type_a }} == cli if ${{ matrix.build_type_b }} == s pyinstaller -F image_encryptor_cli.py
        if ${{ matrix.build_type_a }} == cli if ${{ matrix.build_type_b }} == m pyinstaller image_encryptor_cli.py
        if ${{ matrix.build_type_a }} == gui if ${{ matrix.build_type_b }} == s pyinstaller -F image_encryptor_gui.py
        if ${{ matrix.build_type_a }} == gui if ${{ matrix.build_type_b }} == m pyinstaller image_encryptor_gui.py
    - name: Basic tests
      shell: cmd
      run: |
        cd dist
        if ${{ matrix.build_type_a }} == cli if ${{ matrix.build_type_b }} == m (xcopy /y /s /h .\image_encryptor_cli\* .\) & (rd /s /q .\image_encryptor_cli)
        if ${{ matrix.build_type_a }} == gui if ${{ matrix.build_type_b }} == m (xcopy /y /s /h .\image_encryptor_gui\* .\) & (rd /s /q .\image_encryptor_gui)
        if ${{ matrix.build_type_a }} == cli image_encryptor_cli.exe
        if ${{ matrix.build_type_a }} == gui image_encryptor_gui.exe +test
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.name }}
        path: dist
  Build-by-Nuitka:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: amd64-win64-cli-nuitka-msvc-14.3, os: windows-latest, C: msvc-14.3-x64, A: x64, build_type_a: cli }
          - { name: amd64-win64-gui-nuitka-msvc-14.3,  os: windows-latest, C: msvc-14.3-x64, A: x64, build_type_a: gui }
          - { name: i386-win32-cli-nuitka-msvc-14.3, os: windows-latest, C: msvc-14.3-x86, A: x86, build_type_a: cli }
          - { name: i386-win32-gui-nuitka-msvc-14.3,  os: windows-latest, C: msvc-14.3-x86, A: x86, build_type_a: gui }
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: 'Set up Developer Command Prompt'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.A }}
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install dependencies
      shell: cmd
      run: |
        pip install pillow colorlog pycryptodome numpy zstandard
        if ${{ matrix.build_type_a }} == cli pip install progressbar2
        if ${{ matrix.build_type_a }} == gui pip install -U "https://wxpython.org/Phoenix/snapshot-builds/wxPython-4.1.2a1.dev5304+7c8318e8-cp310-cp310-win_amd64.whl"
        pip install -U "https://github.com/Nuitka/Nuitka/archive/develop.zip"
    - name: Build artifacts
      shell: cmd
      run: |
        mkdir nuitka
        mkdir unpackaged
        mkdir packaged
        if ${{ matrix.build_type_a }} == cli nuitka --python-flag=-OO --msvc=latest --lto=yes --onefile --assume-yes-for-downloads --plugin-enable=anti-bloat,pkg-resources,numpy,multiprocessing,upx --noinclude-pytest-mode=nofollow --noinclude-setuptools-mode=nofollow --output-dir=nuitka --include-package=PIL image_encryptor_cli.py
        if ${{ matrix.build_type_a }} == gui nuitka --python-flag=-OO --msvc=latest --lto=yes --onefile --assume-yes-for-downloads --plugin-enable=anti-bloat,pkg-resources,numpy,multiprocessing,upx --noinclude-pytest-mode=nofollow --noinclude-setuptools-mode=nofollow --include-module=wx._xml --include-package=PIL --output-dir=nuitka image_encryptor_gui.py
    - name: Basic tests
      shell: cmd
      run: |
        cd nuitka
        if ${{ matrix.build_type_a }} == cli (xcopy /y /s /h .\image_encryptor_cli.dist\* ..\unpackaged) & (copy .\*.exe ..\packaged) & (rd /s /q .\image_encryptor_cli.dist) & ..\packaged\image_encryptor_cli.exe
        if ${{ matrix.build_type_a }} == gui (xcopy /y /s /h .\image_encryptor_gui.dist\* ..\unpackaged) & (copy .\*.exe ..\packaged) & (rd /s /q .\image_encryptor_gui.dist) & ..\packaged\image_encryptor_gui.exe +test
    - name: Upload unpackaged artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.name }}-unpackaged
        path: unpackaged
    - name: Upload packaged artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.name }}-packaged
        path: packaged
